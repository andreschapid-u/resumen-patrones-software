[

    {
        "nombre": "Singleton",
        "tipo": "Creacional",
        "logo": "img/patrones/singleton_logo.svg",
        "portafolio": "img/patrones/singleton.svg",
        "resumen": "Recibe su nombre debido a que sólo se puede tener una única instancia para toda la aplicación de una determinada clase, esto se logra restringiendo la libre creación de instancias de esta clase mediante el operador new e imponiendo un constructor privado y un método estático para poder obtener la instancia.",
        "participantes": [
            "El cliente solicita la instancia al Singleton mediante el método estático <strong>getInstance</strong>.",
            "El <strong> Singleton </strong> validará si la instancia ya fue creada anteriormente, de no haber sido creada entonces se crea una nueva.",
            "Se regresa la instancia creada en el paso anterior o se regresa la instancia existente en otro caso."
        ]
    },
    {
        "nombre": "Factory Method",
        "tipo": "Creacional",
        "logo": "img/patrones/factory_logo.svg",
        "portafolio": "img/patrones/factory.svg",
        "resumen": "<strong>Factory Method</strong> permite la creación de objetos de un subtipo determinado a través de una clase <strong>Factory</strong>. Esto es especialmente útil cuando no sabemos, en tiempo de diseño, el subtipo que vamos a utilizar o cuando queremos delegar la lógica de creación de los objetos a una clase <strong>Factory</strong>.",
        "participantes": [
            "El cliente le solicita al <strong>ConcreteFactory</strong> la creación del <strong>ProductA</strong>.",
            "El <strong>ConcreteFactory</strong> localiza la implementación concreta de <strong>ProductA</strong> y crea una nueva instancia.",
            "El <strong>ConcreteFactory</strong> regresa el <strong>ConcreteProductA</strong> creado.",
            "El cliente le solicita al <strong>ConcreteFactor</strong>y la creación del <strong>ProductB</strong>.",
            "El <strong>ConcreteFactory</strong> localiza la implementación concreta del <strong>ProductB</strong> y crea una nueva instancia.",
            "El <strong>ConcreteFactory</strong> regresa el <strong>ConcreteProductB</strong> creado."
        ]
    },
    {
        "nombre": "Abstract Factory",
        "tipo": "Creacional",
        "logo": "img/patrones/abstract_factory_logo.svg",
        "portafolio": "img/patrones/abstract_factory.svg",
        "resumen": "Agrupar un conjunto de clases que tiene un funcionamiento en común llamadas familias, las cuales son creadas mediante un <strong>Factory</strong>, este patrón es especialmente útil cuando requerimos tener ciertas familias de clases para resolver un problema, sin embargo, puede que se requieran crear implementaciones paralelas de estas clases para resolver el mismo problema pero con una implementación distinta.",
        "participantes": [
            "El cliente solicita la creación del <strong>ConcreteFactory1</strong> al <strong>AbstractFactory</strong>.",
            "El <strong>AbstractFactory</strong> crea una instancia del <strong>ConcreteFactory1</strong> y la regresa.",
            "El cliente le solicita al <strong>ConcreteFactory1</strong> la creación de un <strong>ProductA</strong>.",
            "El <strong>ConcreteFactory1</strong> crea una instancia del <strong>ProductA1</strong> que es parte de la familia1 y lo regresa.",
            "El cliente esta vez solicita la creación del <strong>ConcreteFactory2</strong> al <strong>AbstractFactory</strong>.",
            "El <strong>AbstractFactory</strong> crea una instancia del <strong>ConcreteFactory2</strong>.",
            "El cliente le solicita al <strong>ConcreteFactory2</strong> la creación de un <strong>ProductA</strong>.",
            "El <strong>ConcreteFactory2</strong> retorna una instancia del <strong>ProductA2</strong> el cual es parte de la familia2."

        ]
    },
    {
        "nombre": "Builder",
        "tipo": "Creacional",
        "logo": "img/patrones/builder_logo.svg",
        "portafolio": "img/patrones/builder.svg",
        "resumen": "Permite crear objetos complejos a través de uno más simple, el cual, mediante métodos de utilidad, va creando secciones de un objeto más grande, de tal forma que olvidamos de la complejidad de la estructura interna de los objetos.",
        "participantes": [
            "El cliente crea una instancia del <strong>ObjectBuilder</strong>.",
            "El cliente ejecuta el paso 1 de la creación en el <strong>ObjectBuilder</strong>.",
            "Internamente el <strong>ObjectBuilder</strong> crea al <strong>TargetObject</strong>.",
            "El cliente ejecuta el paso 2 de la creación en el <strong>ObjectBuilder</strong>.",
            "Internamente el <strong>ObjectBuileder</strong> crea un <strong>OtherObjectA</strong>.",
            "El cliente ejecuta el paso 3 de la creación en el <strong>ObjectBuilder</strong>.",
            "Internamente el <strong>ObjectBuilder</strong> crear el <strong>OtherObjectB</strong>.",
            "El cliente solicita al <strong>ObjectBuilder</strong> la creación del <strong>TargetObject</strong>, éste toma todos los objetos creados anteriormente, los asocia al <strong>TargetObject</strong> y lo regresa."
        ]
    },
    {
        "nombre": "Prototype",
        "tipo": "Creacional",
        "logo": "img/patrones/prototype_logo.svg",
        "portafolio": "img/patrones/prototype.svg",
        "resumen": "Basa su funcionalidad en la clonación de objetos, estos nuevos objetos son creados mediante un pool de prototipos elaborados previamente y almacenados. Este patrón es especialmente útil cuando necesitamos crear objetos basados en otros ya existentes o cuando se necesita la creación de estructuras de objetos muy grandes.",
        "participantes": [
            "El <strong>Cliente</strong> solicita la clonación de <strong>Prototype</strong> mediante el método clone.",
            "El <strong>Prototype</strong> crea una nueva instancia de si misma mediante el operador new.",
            "El <strong>Prototype</strong> clona todos sus atributos a la nueva instancia.",
            "Opcionalmente, el <strong>Prototype</strong> puede clonar todos los objetos interno, lo que se conoce como Deep clone o clonación profunda.",
            "El nuevo objeto clonado es retornado por el <strong>Prototype</strong>."
        ]
    },
    {
        "nombre": "Adapter",
        "tipo": "Estructural",
        "logo": "img/patrones/adapter_logo.svg",
        "portafolio": "img/patrones/adapter.svg",
        "resumen": "Es utilizado cuando tenemos interfaces de software incompatibles, las cuales a pesar de su incompatibilidad tiene una funcionalidad similar. Este patrón es implementado cuando se desea homogeneizar la forma de trabajar con estas interfaces incompatibles, para lo cual se crea una clase intermedia que funciona como un adaptador.",
        "participantes": [
            "El Client invoca al Adapter con parámetros genéricos.",
            "El Adapter convierte los parámetros genéricos en parámetros específicos del Adaptee.",
            "El Adapter invoca al Adaptee.",
            "El Adaptee responde.",
            "El Adapter convierte la respuesta del Adaptee a una respuesta genérica para el Client.",
            "El Adapter responde al Client con una respuesta genérica."
        ]
    },
    {
        "nombre": "Bridge",
        "tipo": "Estructural",
        "logo": "img/patrones/bridge_logo.svg",
        "portafolio": "img/patrones/bridge.svg",
        "resumen": "Desacopla una abstracción de su implementación, de manera que las dos puedan ser modificadas por separado sin necesidad de modificar la otra; dicho de otra manera, se desacopla una abstracción de su implementación para que puedan variar independientemente.",
        "participantes": [
            "El cliente ejecuta una operación de <strong>AbstraccionImpl</strong>.",
            "<strong>AbstraccionImpl</strong> replica la petición a <strong>ConcreteImplementor</strong>, en este paso el <strong>AbstraccionImpl</strong> pudiera realizar una conversión de los parámetros para ejecutar al <strong>ConcreteImplementor</strong>.",
            "<strong>ConcreteImplementor</strong> regresa los resultados al <strong>AbstraccionImpl</strong>.",
            "El <strong>AbstraccionImpl</strong> convierte los resultados del <strong>ConcreteImplementor</strong> para ser devueltos al cliente."
        ]
    },
    {
        "nombre": "Decorator",
        "tipo": "Estructural",
        "logo": "img/patrones/decorator_logo.svg",
        "portafolio": "img/patrones/decorator.svg",
        "resumen": " Permite al usuario añadir nuevas funcionalidades a un objeto existente sin alterar su estructura, mediante la adición de nuevas clases que envuelven a la anterior dándole funcionamiento extra. Este patrón está diseñado para solucionar problemas donde la jerarquía con subclasificación no puede ser aplicada",
        "participantes": [
            "El <strong>Cliente</strong> realiza una operación sobre el <strong>DecoratorA</strong>.",
            "El <strong>DecoratorA</strong> realiza la misma operación sobre <strong>DecoradorB</strong>.",
            "El decoradorB realiza una acción sobre <strong>ConcreteComponente</strong>.",
            "El <strong>DecoradorB</strong> ejecuta una operación de decoración.",
            "El <strong>DecoradorA</strong> ejecuta una operación de decoración. ",
            "El <strong>Cliente</strong> recibe como resultado un objeto decorado por todos los <strong>Decoradores</strong>, los cuales encapsularon el <strong>Component</strong> en varias capas."
        ]
    }
]